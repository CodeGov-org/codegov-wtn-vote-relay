type CanisterStatusResponse = record {
  status : CanisterStatusType;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettings;
  query_stats : QueryStats;
  idle_cycles_burned_per_day : nat;
  module_hash : opt blob;
  reserved_cycles : nat;
};
type CanisterStatusType = variant { stopped; stopping; running };
type DefiniteCanisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  reserved_cycles_limit : nat;
  log_visibility : LogVisibility;
  wasm_memory_limit : nat;
  memory_allocation : nat;
  compute_allocation : nat;
};
type DeregisterNeuronPairArgs = record { pair_id : nat64 };
type InitArgs = record {
  wtn_governance_canister_id : opt principal;
  nns_governance_canister_id : opt principal;
  wtn_protocol_canister_id : opt principal;
};
type InitOrUpgradeArgs = variant { Upgrade : record {}; Init : InitArgs };
type LogVisibility = variant {
  controllers;
  public;
  allowed_viewers : vec principal;
};
type NeuronPairPublic = record {
  id : nat64;
  admin : principal;
  name : text;
  nns_neuron_id : nat64;
  wtn_neuron_id : blob;
};
type NnsVote = record { adopt : bool; proposal_id : nat64 };
type QueryStats = record {
  response_payload_bytes_total : nat;
  num_instructions_total : nat;
  num_calls_total : nat;
  request_payload_bytes_total : nat;
};
type RegisterNeuronPairArgs = record {
  name : text;
  nns_neuron_id : nat64;
  wtn_neuron_id : blob;
};
type RegisterNeuronPairError = variant {
  ErrorCallingGovernanceCanister : record { int32; text };
  NotPermittedToVote;
  AlreadyRegistered;
  RegistrationLimitExceeded : nat32;
  GovernanceError : record { int32; text };
};
type Result = variant { Ok : nat64; Err : RegisterNeuronPairError };
type VoteToProcess = variant {
  NnsVote : record { nat64; NnsVote };
  PendingWtnVote : record { nat64; WtnVote };
};
type WtnVote = record {
  nns_proposal_id : nat64;
  adopt : bool;
  wtn_proposal_id : nat64;
};
service : (InitOrUpgradeArgs) -> {
  deregister_neuron_pair : (DeregisterNeuronPairArgs) -> (bool);
  list_neuron_pairs : () -> (vec NeuronPairPublic) query;
  logs : () -> (vec text) query;
  register_neuron_pair : (RegisterNeuronPairArgs) -> (Result);
  status : () -> (CanisterStatusResponse);
  votes_to_process : () -> (vec VoteToProcess) query;
}